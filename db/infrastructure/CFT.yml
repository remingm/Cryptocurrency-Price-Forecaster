AWSTemplateFormatVersion: "2010-09-09"
Description: Template to Create a document DB parameter group, subnet group and cluster
Parameters:
  VPC:
    Type: String
    Description: The VPC to create the cluster
    Default: vpc-0b103bd6a68a03861
  SubnetId:
    Type: 'List<AWS::EC2::Subnet::Id>'
    Default: 'subnet-08fb6669826370ea7,subnet-0aa8d96f347294f31'
    Description: Select at least two subnets in your selected VPC.
  Environment:
    Type: String
    Default: int
    AllowedValues:
      - int
      - prod
    Description: Link to the container image in ECR being used by the ECS task definition.

Mappings:
  static:
    all:
      appName: stonk-pix-db
  AWSRegionToAMI:
    us-west-2:
      AMIID: ami-078c97cf1cefd1b38
  environment:
    int:
      mongoDBCredentialSecret: stonk-pix-db-credential-int
    prod:
      mongoDBCredentialSecret: stonk-pix-db-credential-prod

Resources:
   DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "DB instances security group"
      GroupName: !Join 
        - '-'
        - - !FindInMap ['static', 'all', 'appName']
          - 'group'
          - !Ref Environment
      VpcId: !Ref VPC
      SecurityGroupIngress: 
        - 
          CidrIp: "0.0.0.0/0"
          IpProtocol: "-1"
          FromPort: 27017
          IpProtocol: "tcp"
          ToPort: 27017
      SecurityGroupEgress: 
        - 
          CidrIp: "0.0.0.0/0"
          IpProtocol: "-1"
      
   DBSubnetGroup: 
    Type: AWS::DocDB::DBSubnetGroup
    Properties: 
      DBSubnetGroupDescription: "document db subnet group"
      DBSubnetGroupName: !Join 
        - '-'
        - - !FindInMap ['static', 'all', 'appName']
          - 'subnet-group'
          - !Ref Environment
      SubnetIds: !Ref SubnetId

   DBParameterGroup:
    Type: AWS::DocDB::DBClusterParameterGroup
    Properties:
      Description: "our test document db parameter group"
      Family: docdb4.0
      Name: !Join 
        - '-'
        - - !FindInMap ['static', 'all', 'appName']
          - 'parameter-group'
          - !Ref Environment
      Parameters: 
        audit_logs: "disabled"
        tls: "enabled"
        ttl_monitor: "enabled"

   DBCluster:
    Type: AWS::DocDB::DBCluster
    Properties: 
      BackupRetentionPeriod : 5
      DBClusterIdentifier : !Join 
        - '-'
        - - !FindInMap ['static', 'all', 'appName']
          - 'cluster'
          - !Ref Environment
      DBClusterParameterGroupName : !Ref DBParameterGroup
      DBSubnetGroupName : !Ref DBSubnetGroup
      MasterUsername : !Join ['', ['{{resolve:secretsmanager:', !FindInMap [environment, !Ref Environment, mongoDBCredentialSecret], ':SecretString:db-username}}' ]]
      MasterUserPassword : !Join ['', ['{{resolve:secretsmanager:', !FindInMap [environment, !Ref Environment, mongoDBCredentialSecret], ':SecretString:db-password}}' ]]
      Port : "27017"
      PreferredBackupWindow : "23:00-23:59"
      PreferredMaintenanceWindow : "sun:00:00-sun:05:00"
      VpcSecurityGroupIds:
        - !Ref DBSecurityGroup
      StorageEncrypted : true

   DBInstance:
    Type: AWS::DocDB::DBInstance
    Properties:
      AutoMinorVersionUpgrade: true
      AvailabilityZone: "us-west-2a"
      DBClusterIdentifier: !Ref DBCluster
      DBInstanceClass: "db.t3.medium"
      DBInstanceIdentifier: !Join 
        - '-'
        - - !FindInMap ['static', 'all', 'appName']
          - 'instance'
          - !Ref Environment
      PreferredMaintenanceWindow: "sun:00:00-sun:05:00"

Outputs:
   Cluster:
    Description: The DB Cluster Name
    Value: !Ref DBCluster
    
   SubnetGroup:
    Description: The db subnet group name 
    Value: !Ref DBSubnetGroup

   ParameterGroup:
    Description: The db subnet group name 
    Value: !Ref DBParameterGroup